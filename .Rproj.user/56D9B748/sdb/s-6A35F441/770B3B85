{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Project Management With RStudio\"\nteaching: 20\nexercises: 10\nquestions:\n- \"How can I manage my projects in R?\"\nobjectives:\n- To be able to create self-contained projects in RStudio\n- To be able to use git from within RStudio\nkeypoints:\n- \"Use RStudio to create and manage projects with consistent layout.\"\n- \"Treat raw data as read-only.\"\n- \"Treat generated output as disposable.\"\n- \"Separate function definition and application.\"\n- \"Use version control.\"\n---\n\n```{r, include=FALSE}\nsource(\"../bin/chunk-options.R\")\nknitr_fig_path(\"02-\")\n```\n\n## Introduction\n\nThe scientific process is naturally incremental, and many projects\nstart life as random notes, some code, then a manuscript, and\neventually everything is a bit mixed together.\n\n<blockquote class=\"twitter-tweet\"><p>Managing your projects in a reproducible fashion doesn't just make your science reproducible, it makes your life easier.</p>â€” Vince Buffalo (@vsbuffalo) <a href=\"https://twitter.com/vsbuffalo/status/323638476153167872\">April 15, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nMost people tend to organize their projects like this:\n\n![](../fig/bad_layout.png)\n\nThere are many reasons why we should *ALWAYS* avoid this:\n\n1. It is really hard to tell which version of your data is\nthe original and which is the modified;\n2. It gets really messy because it mixes files with various\nextensions together;\n3. It probably takes you a lot of time to actually find\nthings, and relate the correct figures to the exact code\nthat has been used to generate it;\n\nA good project layout will ultimately make your life easier:\n\n* It will help ensure the integrity of your data;\n* It makes it simpler to share your code with someone else\n(a lab-mate, collaborator, or supervisor);\n* It allows you to easily upload your code with your manuscript submission;\n* It makes it easier to pick the project back up after a break.\n\n## A possible solution\n\nFortunately, there are tools and packages which can help you manage your work effectively.\n\nOne of the most powerful and useful aspects of RStudio is its project management\nfunctionality. We'll be using this today to create a self-contained, reproducible\nproject.\n\n\n> ## Challenge: Creating a self-contained project\n>\n> We're going to create a new project in RStudio:\n>\n> 1. Click the \"File\" menu button, then \"New Project\".\n> 2. Click \"New Directory\".\n> 3. Click \"Empty Project\".\n> 4. Type in the name of the directory to store your project, e.g. \"my_project\".\n> 5. Make sure that the checkbox for \"Create a git repository\" is selected.\n> 6. Click the \"Create Project\" button.\n{: .challenge}\n\nNow when we start R in this project directory, or open this project with RStudio,\nall of our work on this project will be entirely self-contained in this directory.\n\n## Best practices for project organization\n\nAlthough there is no \"best\" way to lay out a project, there are some general\nprinciples to adhere to that will make project management easier:\n\n### Treat data as read only\n\nThis is probably the most important goal of setting up a project. Data is\ntypically time consuming and/or expensive to collect. Working with them\ninteractively (e.g., in Excel) where they can be modified means you are never\nsure of where the data came from, or how it has been modified since collection.\nIt is therefore a good idea to treat your data as \"read-only\".\n\n### Data Cleaning\n\nIn many cases your data will be \"dirty\": it will need significant preprocessing\nto get into a format R (or any other programming language) will find useful. This\ntask is sometimes called \"data munging\". I find it useful to store these scripts\nin a separate folder, and create a second \"read-only\" data folder to hold the\n\"cleaned\" data sets.\n\n### Treat generated output as disposable\n\nAnything generated by your scripts should be treated as disposable: it should\nall be able to be regenerated from your scripts.\n\nThere are lots of different ways to manage this output. I find it useful to\nhave an output folder with different sub-directories for each separate\nanalysis. This makes it easier later, as many of my analyses are exploratory\nand don't end up being used in the final project, and some of the analyses\nget shared between projects.\n\n> ## Tip: Good Enough Practices for Scientific Computing\n>\n> [Good Enough Practices for Scientific Computing](https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/blob/gh-pages/good-enough-practices-for-scientific-computing.pdf) gives the following recommendations for project organization:\n>\n> 1. Put each project in its own directory, which is named after the project.\n> 2. Put text documents associated with the project in the `doc` directory.\n> 3. Put raw data and metadata in the `data` directory, and files generated during cleanup and analysis in a `results` directory.\n> 4. Put source for the project's scripts and programs in the `src` directory, and programs brought in from elsewhere or compiled locally in the `bin` directory.\n> 5. Name all files to reflect their content or function.\n>\n{: .callout}\n\n> ## Tip: ProjectTemplate - a possible solution\n>\n> One way to automate the management of projects is to install the third-party package, `ProjectTemplate`.\n> This package will set up an ideal directory structure for project management.\n> This is very useful as it enables you to have your analysis pipeline/workflow organised and structured.\n> Together with the default RStudio project functionality and Git you will be able to keep track of your\n> work as well as be able to share your work with collaborators. **Notice** that the name of the project in the `create.project()`\n> command below is the same as was used above to create a new project.\n>\n> 1. Install `ProjectTemplate`.\n> 2. Load the library\n> 3. Initialise the project:\n>\n> ```{r, eval=FALSE}\n> install.packages(\"ProjectTemplate\")\n> library(ProjectTemplate)\n> create.project(\"../my_project\", merge.strategy = \"allow.non.conflict\")\n> ```\n>\n> For more information on ProjectTemplate and its functionality visit the\n> home page [ProjectTemplate](http://projecttemplate.net/index.html)\n{: .callout}\n\n### Separate function definition and application\n\nWhen your project is new and shiny, the script file usually contains many lines\nof directly executed code. As it matures, reusable chunks get pulled into their\nown functions. It's a good idea to separate these into separate folders; one\nto store useful functions that you'll reuse across analyses and projects, and\none to store the analysis scripts.\n\n> ## Tip: avoiding duplication\n>\n> You may find yourself using data or analysis scripts across several projects.\n> Typically you want to avoid duplication to save space and avoid having to\n> make updates to code in multiple places.\n>\n> In this case I find it useful to make \"symbolic links\", which are essentially\n> shortcuts to files somewhere else on a filesystem. On Linux and OS X you can\n> use the `ln -s` command, and on Windows you can either create a shortcut or\n> use the `mklink` command from the windows terminal.\n{: .callout}\n\n### Save the data in the data directory\n\nNow we have a good directory structure we will now place/save the data file in the `data/` directory.\n\n> ## Challenge 1\n> Download the gapminder data from [here](https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv).\n>\n> 1. Download the file into the `data/` folder within your project:\n> ```{r}\n> download.file(\"https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv\", \"data/gapminder-FiveYearData.csv\") \n> ```\n>\n> We will load and inspect these data later.\n{: .challenge}\n\n> ## Challenge 2\n> It is useful to get some general idea about the dataset, directly from the\n> command line, before loading it into R. Understanding the dataset better\n> will come handy when making decisions on how to load it in R. Use command-line\n> shell to answer the following questions:\n> 1. What is the size of the file?\n> 2. How many rows of data does it contain?\n> 3. What are the data types of values stored in this file\n>\n>\n> > ## Solution to Challenge 2\n> >\n> > By running these commands in the shell:\n> > ```{r ch2a-sol, engine='sh'}\n> > ls -lh data/gapminder-FiveYearData.csv\n> > ```\n> > The file size is 80K.\n> > ```{r ch2b-sol, engine='sh'}\n> > wc -l data/gapminder-FiveYearData.csv\n> > ```\n> > There are 1705 lines and the data looks like:\n> > ```{r ch2c-sol, engine='sh'}\n> > head data/gapminder-FiveYearData.csv\n> > ```\n> {: .solution}\n{: .challenge}\n\n> ## Tip: command line in R Studio\n>\n> You can quickly open up a shell in RStudio using the **Tools -> Shell...** menu item.\n{: .callout}\n\n### Version Control\n\nWe also set up our project to integrate with git, putting it under version control.\nRStudio has a nicer interface to git than shell, but is very limited in what it can\ndo, so you will find yourself occasionally needing to use the shell. Let's go\nthrough and make an initial commit of our template files.\n\nThe workspace/history pane has a tab for \"Git\". We can stage each file by checking the box:\nyou will see a green \"A\" next to stage files and folders, and yellow question marks next to\nfiles or folders git doesn't know about yet. RStudio also nicely shows you the difference\nbetween files from different commits.\n\n> ## Tip: versioning disposable output\n>\n> Generally you do not want to version disposable output (or read-only data).\n> You should modify the `.gitignore` file to tell git to ignore these files\n> and directories.\n{: .callout}\n\n> ## Challenge 3\n>\n> 1. Create a directory within your project called `graphs`.\n> 2. Modify the `.gitignore` file to contain `graphs/`\n> so that this disposable output isn't versioned.\n>\n> Add the newly created folders to version control using\n> the git interface.\n>\n> > ## Solution to Challenge 3\n> >\n> > This can be done with the command line:\n> > ```\n> > $ mkdir graphs\n> > $ echo \"graphs/\" >> .gitignore\n> > ```\n> > {: . shell}\n> {: .solution}\n{: .challenge}\n\nNow we want to push the contents of this commit to GitHub, so it is also backed-up off site and available to collaborators.\n\n> ## Challenge 4\n>\n> 1. In GitHub, create a New repository, called here `BCB546-R-Exercise`. \n> Don't initialize it with a README file because we'll be importing an existing repository..\n> 2. In RStudio, again click Tools -> Shell â€¦ . Enter:\n> ```{r}\n> $ git remote add origin https://github.com/[path to your directory]\n> $ git config remote.origin.url git@github.com:[path to your directory]\n> $ git pull -u origin master\n> $ git push -u origin master\n```\n> {: . shell}\n{: .challenge}\n\n",
    "created" : 1484931863540.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1267488399",
    "id" : "770B3B85",
    "lastKnownWriteTime" : 1484935313,
    "last_content_update" : 1484936710670,
    "path" : "/Users/dlavrov/Documents/GitHub/BCB546_R-Skills/_episodes_rmd/02-project-intro.Rmd",
    "project_path" : "_episodes_rmd/02-project-intro.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}
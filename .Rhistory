install.packages("checkpoint")
source("../bin/chunk-options.R")
knitr_fig_path("02-")
datasets::cars
datasets::mtcars
df <- data.frame(
x = 1:3,
y = c("a", "b", "c"),
str(df)
df <- data.frame(
x = 1:3,
y = c("a", "b", "c"))
str(df)
typeof(df)
class(df)
is.data.frame(df)
typeof(df)
class(df)
is.data.frame(df)
cats <- data.frame(
coat = c("calico","black","tabby"),
weight = c(2.1, 5.0, 3.2),)
str(df)
cats <- data.frame(
coat = c("calico","black","tabby"),
weight = c(2.1, 5.0, 3.2),)
str(df)
cats <- data.frame(
coat = c("calico","black","tabby"),
weight = c(2.1, 5.0, 3.2), likes_string=(1,0,1))
cats <- data.frame(coat = c("calico","black","tabby"), weight = c(2.1, 5.0, 3.2), likes_string=(1,0,1))
cats <- data.frame(coat = c("calico","black","tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1,0,1))
str(cats)
age <- c(2,3,5,12)
cats
age <- c(2,3,5,12)
cats
cats <- cbind(cats, age)
cats
age <- c(4,5,8)
cats <- cbind(cats, age)
cats
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
cats[-4,]
cats
cats[-4,]
cats <- cats[-4,]
cats
cats <- rbind(cats, cats)
cats
cats
cats <- data.frame(coat = c("calico","black","tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1,0,1))
row.names(cats) = c("cat1","cat2","cat3"")
)
")
row.names(cats) = c("cat1","cat2","cat3")
cats <- rbind(cats, cats)
cats
rownames(cats) <- NULL
cats
cats
d <- read.csv("https://github.com/vsbuffalo/bds-files/blob/master/chapter-08-r/Dataset_S1.txt)
")"
")""
d <- read.csv("https://github.com/vsbuffalo/bds-files/blob/master/chapter-08-r/Dataset_S1.txt")
str(d)
dim(d)
d <- read.csv("https://github.com/vsbuffalo/bds-files/chapter-08-r/Dataset_S1.txt")
d <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
str(d)
head(d, n=3)
nrow(d)
ncol(d)
dim(d)
col.names()
colnames(d)
? summary()
str(d)
dim(d)
nrow(d)
summary(d$total.SNPs)
d$total.SNPs >= 85
typeof(df)
class(df)
is.data.frame(df)
typeof(df)
class(df)
is.data.frame(df)
d[[1]]
d[1]
d[1]
d[[1]]
xlist[["start"]]
d[["start"]]
d[1:3,]
d[,3]
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
detach("package:ggplot2", unload=TRUE)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggplot2")) install.packages("ggplot2")
d$position <- (d$end + d$start) / 2
ggplot(d) + geom_point(aes(x=position, y=diversity))
d$diversity <- d$Pi / (10*1000)
d$position <- (d$end + d$start) / 2
ggplot(d) + geom_point(aes(x=position, y=diversity))
ggplot(d) + geom_point(aes(x=position, y=diversity)) + xlab("chromosome position (basepairs)") + ylab("nucleotide diversity")
ggplot(d) + geom_point(aes(x=position, y=diversity)) + xlab("chromosome position (basepairs)") + ylab("nucleotide diversity") + ggtitle("My First Plot")
ggplot(d) + geom_point(aes(x=position, y=diversity, color=cent))
d$cent <- d$start >= 25800000 & d$end <= 29700000
ggplot(d) + geom_point(aes(x=position, y=diversity, color=cent))
ggplot(d) + geom_point(aes(x=position, y=diversity), alpha=0.01)
ggplot(d) + geom_density(aes(x=diversity), fill="black")
ggplot(d) + geom_density(aes(x=diversity, fill=cent), alpha=0.4)
ggplot(d, aes(x=depth, y=total.SNPs)) + geom_point() + geom_smooth()
ggplot(d, aes(x=depth, y=total.SNPs)) + geom_smooth()
ggplot(d, aes(x=depth, y=total.SNPs)) + geom_point() + geom_smooth()
names(d)
d$GC.binned <- cut(d$percent.GC, 5)
names(d)[12]
colnames(d)[12] <- "percent.GC"
d$GC.binned <- cut(d$percent.GC, 5)
d$GC.binned
table(d$GC.binned)
ggplot(d) + geom_bar(aes(x=GC.binned))
ggplot(d) + geom_bar(aes(x=percent.GC))
ggplot(d) + geom_density(aes(x=depth, linetype=GC.binned), alpha=0.5)
subset(d, Pi > 16 & percent.GC > 80, c(start, end, Pi, percent.GC, depth))
c(3,4,-1)%in%c(1,3,4,8)
reps <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/chrX_rmsk.txt.gz", header=TRUE)
#reps <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/chrX_rmsk.txt.gz", header=TRUE)
mtfs <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_recombrates.txt", header=TRUE)
download.file("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/chrX_rmsk.txt.gz", destfile = "data/chrX_rmsk.txt.gz")
reps <- read.delim("data/chrX_rmsk.txt.gz")
head(reps, 3)
head(mtfs, 3)
reps$repClass == "SINE" | reps$repClass == "LINE" | reps$repClass == "LTR" | reps$repClass == "DNA"
reps$repClass == "SINE" | reps$repClass == "LINE" | reps$repClass == "LTR" | reps$repClass == "DNA" | reps$repClass == "Simple_repeat"
top5_repclass <- names(sort(table(reps$repClass), decreasing=TRUE)[1:5])
top5_repclass
match(c(3,4,-1),c(1,3,4,8))
mtfs <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_recombrates.txt", header=TRUE)
rpts <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_repeats.txt", header=TRUE)
head(mtfs, 3)
head(rpts, 3)
mtfs <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_recombrates.txt", header=TRUE)
rpts <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_repeats.txt", header=TRUE)
head(mtfs, 3)
head(rpts, 3)
mtfs$pos <- paste(mtfs$chr, mtfs$motif_start, sep="-")
rpts$pos <- paste(rpts$chr, rpts$motif_start, sep="-")
table(mtfs$pos %in% rpts$pos)
mtfs$pos <- paste(mtfs$chr, mtfs$motif_start, sep="-")
rpts$pos <- paste(rpts$chr, rpts$motif_start, sep="-")
table(mtfs$pos %in% rpts$pos)
i <- match(mtfs$pos, rpts$pos)
table(is.na(i))
mtfs$repeat_name <- rpts$name[i]
head(mtfs[!is.na(mtfs$repeat_name), ], 3)
df <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
df <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
d$GC.binned <- cut(d$percent.GC, 5)
d_split <- split(d$depth, d$GC.binned)
str(d_split)
lapply(d_split, mean)
z <- 1
while(z > 0.1){
z <- runif(1)
print(z)
}
f <- function(x) x^2
f
#> function(x) x^2
formals(f)
#> $x
body(f)
#> x^2
environment(f)
#> <environment: R_GlobalEnv>
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
x <- 4
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
rm(l, m)
n <- function(x) x / 2
o <- function() {
n <- 10
n(n)
}
o()
rm(n, o)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
j()
rm(j)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
j()
rm(j)
f <- function() x
x <- 15
f()
x <- 20
f()
f <- function() x + 1
codetools::findGlobals(f)
environment(f) <- emptyenv()
f()
`(` <- function(e1) {
if (is.numeric(e1) && runif(1) < 0.1) {
e1 + 1
} else {
e1
}
}
replicate(50, (1 + 2))
rm("(")
x <- 25
y <- 30
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
c(x, y)
x <- 25
y <- 30
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
c(x, y)
rm(x, y)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k
k()
rm(j, k)
i <- function(a, b) {
c(missing(a), missing(b))
}
i()
i(a = 1)
i(b = 2)
i(1, 2)
i <- function(a, b) {
d <- c(missing(a), missing(b))
return(d)
}
i()
i(a = 1)
i(b = 2)
i(1, 2)
f <- function(x) {
10
}
f(stop("This is an error!"))
f <- function(x) {
force(x)
10
}
f(stop("This is an error!"))
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders[[10]](10)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
adders2[[10]](10)
add <- function(x) {
x
function(y) x + y
}
plot(1:5, col = "red")
plot(1:5, cex = 5, pch = 20)
plot(1:5, col = "red")
plot(1:5, cex = 5, pch = 20)
plot(1:5, bty = "u")
plot(1:5, labels = FALSE)
f <- function(...) {
names(list(...))
}
f(a = 1, b = 2)
f <- function(...) {
names(list(...))
}
f(a = 1, b = 2)
`%+%` <- function(a, b) paste0(a, b)
"new" %+% " string"
`second<-` <- function(x, value) {
x[2] <- value
x
}
x <- 1:10
second(x) <- 5L
x
`modify<-` <- function(x, position, value) {
x[position] <- value
x
}
modify(x, 1) <- 10
x
f <- function(x) {
if (x < 10) {
0
} else {
10
}
}
f(5)
f(15)
f1 <- function() 1
f2 <- function() invisible(1)
f1()
f2()
f1() == 1
f2() == 1
f1 <- function() 1
f2 <- function() invisible(1)
f1()
f2()
f1() == 1
f2() == 1
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
funs
f <- function(x) x^2
f
#> function(x) x^2
formals(f)
#> $x
body(f)
#> x^2
environment(f)
#> <environment: R_GlobalEnv>
sapply(1:5, `+`, 3)
sapply(1:5, "+", 3)
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
# equivalent to
sapply(x, function(x) x[2])
install.packages('stringr', repos='http://cran.us.r-project.org')
q()
